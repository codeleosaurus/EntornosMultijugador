package es.codeurjc.em.snake;

import java.io.IOException;
import java.util.concurrent.ConcurrentHashMap;
//import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.ReentrantLock;

import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public class SnakeHandler extends TextWebSocketHandler {

	private static final String SNAKE_ATT = "snake";
	private static final String ROOM_ATT = "room";
	private static final String ROOM_CREATOR = "roomCreator";

	// private AtomicInteger snakeIds = new AtomicInteger(0);

	private ConcurrentHashMap<String, WebSocketSession> openSessions = new ConcurrentHashMap<>();
	private ConcurrentHashMap<String, Room> rooms = new ConcurrentHashMap<>();
	private ReentrantLock mapAccess = new ReentrantLock();
	private ReentrantLock roomsAccess = new ReentrantLock();

	// private SnakeGame snakeGame = new SnakeGame();

	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		/*if (rooms.mappingCount() > 0) {
			StringBuilder sb = new StringBuilder();
			for (Room r : rooms.values()) {
				sb.append(String.format("{\"name\": \"%s\", 				\"diff\": \"%s\", \"players\": %d}",
						r.getName(), r.getDifficulty(), r.getNumberOfPlayers()));
				sb.append(',');
			}
			sb.deleteCharAt(sb.length() - 1);
			String msg = String.format("{\"type\": \"allRooms\", \"data\":[%s]}", sb.toString());
			session.sendMessage(new TextMessage(msg));
		}*/
		
		//updateRooms(session);

		/*
		 * int id = snakeIds.getAndIncrement();
		 * 
		 * Snake s = new Snake(id, session);
		 * 
		 * session.getAttributes().put(SNAKE_ATT, s);
		 * 
		 * snakeGame.addSnake(s);
		 * 
		 * StringBuilder sb = new StringBuilder(); for (Snake snake :
		 * snakeGame.getSnakes()) {
		 * sb.append(String.format("{\"id\": %d, \"color\": \"%s\"}", snake.getId(),
		 * snake.getHexColor())); sb.append(','); } sb.deleteCharAt(sb.length()-1);
		 * String msg = String.format("{\"type\": \"join\",\"data\":[%s]}",
		 * sb.toString());
		 * 
		 * snakeGame.broadcast(msg);
		 */
	}
	
	private void updateRooms(WebSocketSession session) throws Exception{
		if (rooms.mappingCount() > 0) {
			StringBuilder sb = new StringBuilder();
			for (Room r : rooms.values()) {
				sb.append(String.format("{\"name\": \"%s\",\"diff\": \"%s\", \"players\": %d}",
						r.getName(), r.getDifficulty(), r.getNumberOfPlayers()));
				sb.append(',');
			}
			sb.deleteCharAt(sb.length() - 1);
			String msg = String.format("{\"type\": \"allRooms\", \"data\":[%s]}", sb.toString());
			session.sendMessage(new TextMessage(msg));
		}
	}

	private void createRoom(WebSocketSession session, String roomName, String diff) throws Exception {
		roomsAccess.lock();

		// Si el jugador no es administrador de ninguna sala ni est√° jugando en ninguna
		// sala
		// podemos crear la sala
		boolean isAdmin = (boolean) session.getAttributes().get(ROOM_CREATOR);
		String sala = (String) session.getAttributes().get(ROOM_ATT);

		if (!rooms.containsKey(roomName) && !isAdmin && sala.equals("")) {

			Snake s = (Snake) session.getAttributes().get(SNAKE_ATT);
			Room r = new Room(roomName, Difficulty.valueOf(diff), s.getName());
			r.addSnake(s);
			rooms.put(roomName, r);

			roomsAccess.unlock();

			synchronized (session) {
				session.getAttributes().put(ROOM_ATT, roomName);
				session.getAttributes().put(ROOM_CREATOR, true);
			}

			session.sendMessage(new TextMessage("{\"type\": \"createRoom\", \"created\": \"true\"}"));
			sendMsg("{\"type\": \"updateRoom\", \"name\": \"" + roomName + "\", \"diff\": \"" + diff
					+ "\", \"players\": " + r.getNumberOfPlayers() + "}");
		} else {
			roomsAccess.unlock();
			session.sendMessage(new TextMessage("{\"type\": \"createRoom\", \"created\": \"false\"}"));
			// Mandar mensaje de que el nombre no es valido
		}
	}

	private void startMatch(String roomName) throws Exception {
		Room r = rooms.get(roomName);
		r.startGame();

	}

	private void joinRoom(WebSocketSession session, String roomName) throws Exception {
		Snake s = (Snake) session.getAttributes().get(SNAKE_ATT);
		Room currentRoom = rooms.get(roomName);

		if (currentRoom != null && currentRoom.addSnake(s)) {

			session.sendMessage(new TextMessage("{\"type\": \"room\", \"joined\": true}"));
			sendMsg("{\"type\": \"updateRoom\", \"name\": \"" + currentRoom.getName() + "\", \"diff\": \""
					+ currentRoom.getDifficulty().toString() + "\", \"players\": \"" + currentRoom.getNumberOfPlayers()
					+ "\"}");
		} else {
			session.sendMessage(new TextMessage("{\"type\": \"room\", \"joined\": false}"));
		}
	}

	private void initSession(WebSocketSession session, String name) throws Exception {
		
		updateRooms(session);

		mapAccess.lock();
		if (!openSessions.containsKey(name)) {
			openSessions.put(name, session);
			mapAccess.unlock();

			Snake s = new Snake(name, session);

			synchronized (session) {
				session.getAttributes().put(SNAKE_ATT, s);
				session.getAttributes().put(ROOM_ATT, "");
				session.getAttributes().put(ROOM_CREATOR, false);
			}
			session.sendMessage(new TextMessage("{\"type\": \"name\", \"data\": true}"));
		} else {
			mapAccess.unlock();
			// Mandar mensaje de que el nombre no es valido
			session.sendMessage(new TextMessage("{\"type\": \"name\", \"data\": false}"));
		}

	}

	private void sendMsg(String msg) {
		for (WebSocketSession s : openSessions.values()) {
			try {
				s.sendMessage(new TextMessage(msg));
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	private void sendChatMsg(String msg, String sender) {
		for (WebSocketSession s : openSessions.values()) {
			try {
				s.sendMessage(new TextMessage(
						"{\"type\": \"chat\", \"msg\": \"" + msg + "\", \"author\": \"" + sender + "\"}"));
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {

		try {
			String payload = message.getPayload();
			System.out.println("Message received: " + payload);

			if (payload.equals("ping")) {
				return;
			}

			ObjectMapper mapper = new ObjectMapper();
			JsonNode node = mapper.readTree(payload);

			String functionName = node.get("type").asText();

			switch (functionName) {
			case "direction":
				Snake s = (Snake) session.getAttributes().get(SNAKE_ATT);
				Direction d = Direction.valueOf(node.get("params").asText().toUpperCase());
				s.setDirection(d);
				break;
			case "name":
				initSession(session, node.get("params").asText());
				break;
			case "chat":
				sendChatMsg(node.get("params").asText(), node.get("author").asText());
				break;
			case "createRoom":
				createRoom(session, node.get("roomName").asText(), node.get("diff").asText().toUpperCase());
				break;
			case "joinRoom":
				joinRoom(session, node.get("params").asText());
				break;
			case "start":
				startMatch(node.get("params").asText());
				break;
			case "exit":
				exitRoom(session);
				break;
			}

		} catch (Exception e) {
			System.err.println("Exception processing message " + message.getPayload());
			e.printStackTrace(System.err);
		}

		/*
		 * try {
		 * 
		 * String payload = message.getPayload();
		 * 
		 * if (payload.equals("ping")) { return; }
		 * 
		 * Snake s = (Snake) session.getAttributes().get(SNAKE_ATT);
		 * 
		 * Direction d = Direction.valueOf(payload.toUpperCase()); s.setDirection(d);
		 * 
		 * } catch (Exception e) { System.err.println("Exception processing message " +
		 * message.getPayload()); e.printStackTrace(System.err); }
		 */
	}

	public void exitRoom(WebSocketSession session) throws Exception {
		// borramos la serpiente de la partida
		Snake sn = (Snake) session.getAttributes().get(SNAKE_ATT);
		rooms.get(session.getAttributes().get(ROOM_ATT)).removeSnake(sn);
		// borramos rooms si no quedan jugadores
		if (rooms.get(session.getAttributes().get(ROOM_ATT)).getSnakes().size() <= 0) {
			rooms.remove(session.getAttributes().get(ROOM_ATT));
			System.out.println("sala: " + session.getAttributes().get(ROOM_ATT) + " borrada");
		}
		// los atributos room_att que especifica en que sala esta jugando se inicializa
		// y room_creator tb
		synchronized (session) {
			session.getAttributes().put(ROOM_ATT, "");
			session.getAttributes().put(ROOM_CREATOR, false);
		}

		session.sendMessage(new TextMessage("{\"type\": \"leave\", \"id\": \"" + sn.getName() + "\"}"));
		System.out.println("snake: " + sn.getName() + " borrada");

		updateRooms(session);
	}

	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {

		System.out.println("Connection closed. Session " + session.getId());

		Snake s = (Snake) session.getAttributes().get(SNAKE_ATT);

		// Hay que tener en cuenta que pasa si: el jugador se desconecta y no estaba en
		// ninguna room o si si que lo estaba
		// snakeGame.removeSnake(s);
		String temp = (String) session.getAttributes().get(ROOM_ATT);
		
		if (!temp.equals("")) {
			Room r = rooms.get(temp);
			r.removeSnake(s);
			if (r.getNumberOfPlayers() < Room.MIN_PLAYERS) {
				rooms.remove(temp);
				System.out.println("sala: " + temp + " borrada");
			}
		}
<<<<<<< HEAD

		openSessions.remove(s.getName());
=======
		openSessions.remove(s.getName());
		
		
>>>>>>> 0edbcb21fad0bf3648b38c352c5603eafaeec8ea

		// String msg = String.format("{\"type\": \"leave\", \"id\": %d}", s.getId());
		String msg = String.format("{\"type\": \"leave\", \"name\": \"%s\"}", s.getName());

		// snakeGame.broadcast(msg);
	}

}
